<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:ctx="http://www.springframework.org/schema/context"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd

             http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!--<ctx:component-scan base-package="com.springsource" annotation-config="true">-->
        <!--&lt;!&ndash; TODO: MZA: Required to not initialize controllers in backend - web subpackage should be useful &ndash;&gt;-->
        <!--&lt;!&ndash;<ctx:exclude-filter type="regex" expression="grails\.xml\.config\.controllers.*"/>&ndash;&gt;-->
    <!--</ctx:component-scan>-->
    <!--<ctx:component-scan base-package="grails.xml, com.test" />-->

    <!--<mvc:annotation-driven />-->


    <!--<mvc:annotation-driven>-->
        <!--<mvc:message-converters>-->
            <!--<beans:bean-->
                    <!--class="org.springframework.http.converter.StringHttpMessageConverter" />-->
            <!--<beans:bean-->
                    <!--class="org.springframework.http.converter.ResourceHttpMessageConverter" />-->
            <!--<beans:bean-->
                    <!--class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">-->
                <!--&lt;!&ndash;<beans:property name="objectMapper" ref="jacksonObjectMapper" />&ndash;&gt;-->
            <!--</beans:bean>-->
        <!--</mvc:message-converters>-->
    <!--</mvc:annotation-driven>-->



    <!--<beans:bean id="jacksonMessageConverter"-->
          <!--class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">-->

    <!--</beans:bean>-->
    <!--<beans:bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">-->
        <!--<beans:property name="messageConverters">-->
            <!--<beans:list>-->
                <!--<beans:ref bean="jacksonMessageConverter"/>-->
            <!--</beans:list>-->
        <!--</beans:property>-->
    <!--</beans:bean>-->


    <!--<http auto-config='true'>-->
    <!--<intercept-url pattern="/login*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>-->
    <!--<intercept-url pattern="/test/**" access="ROLE_USER"/>-->
    <!--<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>-->

    <!--<form-login login-page='/login' default-target-url='/test'-->
    <!--always-use-default-target='true'/>-->
    <!--<logout logout-url="/j_spring_security_logout" invalidate-session="true" logout-success-url="/"/>-->
    <!--<http-basic/>-->

    <!--</http>-->

    <!-- For S2OAuth endpoints -->
    <http pattern="/oauth/token"
          create-session="stateless"
          authentication-manager-ref="clientAuthenticationManager"
          entry-point-ref="oauthAuthenticationEntryPoint"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>
        <http-basic entry-point-ref="oauthAuthenticationEntryPoint"/>
        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
    </http>

    <http use-expressions="true">
        <!-- Authentication policy -->
        <!--<form-login login-page="/signin" login-processing-url="/signin/authenticate" authentication-failure-url="/signin?error=1" />-->
        <form-login login-page='/signin' default-target-url='/test'/>
        <logout logout-url="/signout" delete-cookies="JSESSIONID"/>
        <!-- Authorization policy definition: TODO consider replacing with @Secured on @Controllers -->
        <intercept-url pattern="/" access="permitAll"/>
        <intercept-url pattern="/favicon.ico" access="permitAll"/>
        <intercept-url pattern="/members/**" access="permitAll"/>
        <intercept-url pattern="/groups/**" access="permitAll"/>
        <intercept-url pattern="/pubsub/**" access="permitAll"/>
        <intercept-url pattern="/resources/**" access="permitAll"/>
        <intercept-url pattern="/signup" access="permitAll" requires-channel="http"/>
        <intercept-url pattern="/signin" access="permitAll" requires-channel="http"/>
        <intercept-url pattern="/signin/*" access="permitAll" requires-channel="http"/>
        <intercept-url pattern="/reset" access="permitAll" requires-channel="http"/>
        <!-- TODO this would probably be better mapped to simply /invite?token={token} but not able to vary security policy here based on presence of a request parameter.  Consider @Secured on @Controller. -->
        <intercept-url pattern="/invite/accept" access="permitAll" requires-channel="http"/>
        <!-- TODO this should be restricted to admin users only -->
        <intercept-url pattern="/admin/**" access="permitAll"/>
        <intercept-url pattern="/my/test" access="permitAll"/>
        <intercept-url pattern="/test/**" access="hasAuthority('ROLE_USER')"/>
        <intercept-url pattern="/**" access="isAuthenticated()" requires-channel="http"/>
        <custom-filter ref="resourceServerFilter" before="EXCEPTION_TRANSLATION_FILTER"/>
    </http>


    <!--
    <beans:bean id="daoAuthenticationProvider"
          class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <beans:property name="userDetailsService" ref="userDetailsService"/>
    </beans:bean>

    <beans:bean id="authenticationManager"
          class="org.springframework.security.authentication.ProviderManager">
        <beans:property name="providers">
            <beans:list>
                <beans:ref local="daoAuthenticationProvider"/>
            </beans:list>
        </beans:property>
    </beans:bean>

    <authentication-manager>
        <authentication-provider user-service-ref="userDetailsService">
            <password-encoder hash="plaintext"/>
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="userDetailsService" class="com.example.security.TestService"/>

     -->

    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="usernamePasswordAuthenticationProvider"/>
    </authentication-manager>
    <beans:bean id="usernamePasswordAuthenticationProvider"
                class="com.example.security.UsernamePasswordAuthenticationService"/>


    <beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
                xmlns="http://www.springframework.org/schema/beans">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>
                <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>


    <!-- For S2OAuth endpoints -->
    <authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService"/>
    </authentication-manager>

    <beans:bean id="clientDetailsUserService"
                class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetails"/>
    </beans:bean>

    <beans:bean id="oauthAuthenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="greenhouseApi"/>
    </beans:bean>


    <beans:bean id="clientDetails" class="com.example.security.ClientDetailsService"/>
    <beans:bean id="connectedAppRepository" class="com.example.security.app.ConnectedAppService"/>
    <beans:bean id="profileRepository" class="com.example.security.UserProfilesService"/>

    <beans:bean id="myBean" class="grails.xml.config.beans.TestBean"/>


    <beans:import resource="security-oauth-provider.xml"/>


    <!--<mvc:annotation-driven>-->
        <!--<mvc:argument-resolvers>-->
            <!--<beans:bean class="com.springsource.greenhouse.web.AccountHandlerMethodArgumentResolver"/>-->
        <!--</mvc:argument-resolvers>-->
    <!--</mvc:annotation-driven>-->
    <!--<mvc:interceptors>-->
        <!--<beans:bean class="com.springsource.greenhouse.web.AccountExposingHandlerInterceptor"/>-->
    <!--</mvc:interceptors>-->

    <beans:bean id="bb" class="com.test.MyTestBean" init-method="init"/>

</beans:beans>
